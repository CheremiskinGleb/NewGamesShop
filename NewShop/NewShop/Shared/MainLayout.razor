@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using NewShop.Model
@using NewShop.Data
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NewShop.Service.CartHandler.ICartHandlerService CartHandler
@using System.Security.Claims
@inject NavigationManager NavManager


<div class="page">
	@*<div class="sidebar">
			<NavMenu />
		</div>*@



	<div class="main">
		<MudPopover Open="@_isOpen" Class="px-4 pt-4" Style="position: absolute; right: 0; max-width: 30%; margin-top: 40px; height: 500px;">
			<div class="d-flex flex-column" style="padding: 20px;">
				<NewShop.Components.Cart />
			</div>
		</MudPopover>

		<MudAppBar Color="Color.Tertiary">
			<MudText @onclick="@(() => NavigationManager.NavigateTo(""))" Typo="Typo.h2" Color="Color.Primary">GameShop</MudText>
			<MudAppBarSpacer />
			<AuthorizeView Roles="Customer">
				<Authorized>
                        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" @onclick="ToggleUserRoleToDev">
                            В режим разработчика
                            </MudButton>
                        
					<MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.VideoLibrary" OnClick="@(() => { CartHandler.CloseCart(); NavigationManager.NavigateTo("/library"); })" />
				</Authorized>
			</AuthorizeView>
			<AuthorizeView Roles="Developer">
				<Authorized>
                    <MudButton @onclick="ToggleUserRoleToCus" Color="Color.Primary" ButtonType="ButtonType.Submit">В режим покупателя</MudButton>
					<MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.VideoLibrary" OnClick="@(() => { CartHandler.CloseCart(); NavigationManager.NavigateTo("/library"); })" />
				</Authorized>
				<NotAuthorized>
					<MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.ShoppingCart" OnClick="ToggleOpen"></MudIconButton>
				</NotAuthorized>
			</AuthorizeView>
			<LoginDisplay />
		</MudAppBar>

		@*<div class="top-row px-4 auth">
				<LoginDisplay />
			</div>*@

		<MudMainContent Class="pt-16">
			<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
				@Body
			</MudContainer>
		</MudMainContent>
	</div>
</div>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private string UserName { get; set; } = "";
    private string UserId { get; set; } = "";
    private IdentityUser User { get; set; }


    private string? authMessage;
    private string? surname;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();


    [Inject]
    public ApplicationDbContext DbContext { get; set; }

    private string cart = "";

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    protected override void OnInitialized()
    {
        CartHandler.CartCloseEvent += () => { if (_isOpen) ToggleOpen(); };

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        UserName = authState.User.Identity.Name;

        User = (from user in DbContext.Users
                where user.UserName == UserName
                select user).FirstOrDefault();

        if (User is null) {
            return;
        }

        UserId = User.Id;
    }

    private async void ToggleUserRoleToDev()
    {
        var role = DbContext.UserRoles
            .Where(roles => roles.UserId == UserId)
            .Select(roles => roles)
            .FirstOrDefault();

        if (role != null)
        {
            DbContext.Entry(role).State = EntityState.Deleted;
        }


        role = new IdentityUserRole<string>
            {
                UserId = UserId,
                RoleId = "dev"
            };

        DbContext.UserRoles.Add(role);

        await DbContext.SaveChangesAsync();

        var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (string.IsNullOrEmpty(returnUrl))
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        else
            NavigationManager.NavigateTo("/Identity/Account/Login?returnUrl=/" + returnUrl, true);
    }

    private async void ToggleUserRoleToCus()
    {
        var role = DbContext.UserRoles.Where(roles => roles.UserId == UserId).Select(roles => roles).FirstOrDefault();

        if (role != null)
        {
            DbContext.Entry(role).State = EntityState.Deleted;
        }


        role = new IdentityUserRole<string>
            {
                UserId = UserId,
                RoleId = "cus"
            };

        DbContext.UserRoles.Add(role);

        await DbContext.SaveChangesAsync();

        var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (string.IsNullOrEmpty(returnUrl))
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        else
            NavigationManager.NavigateTo("/Identity/Account/Login?returnUrl=/" + returnUrl, true);
    }
}